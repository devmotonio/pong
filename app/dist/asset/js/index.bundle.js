/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./app/src/js/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n;// CONCATENATED MODULE: ./app/src/js/area.js\nclass Area {\r\n  constructor(width, height, x1, y1) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.x1 = x1;\r\n    this.y1 = y1;\r\n  }\r\n  get x2() {\r\n    return this.x1 + this.width;\r\n  }\r\n  get y2() {\r\n    return this.y1 + this.height;\r\n  }\r\n\r\n  setPosition(positionX, positionY) {\r\n    this.x1 = positionX;\r\n    this.y1 = positionY;\r\n  }\r\n\r\n  containsCord(positionX, positionY) {\r\n    return this.x1 <= positionX && positionX <= this.x2 && this.y1 <= positionY && positionY <= this.y2;\r\n  }\r\n\r\n  containsArea(area) {\r\n    return (\r\n      this.containsCord(area.x1, area.y1) ||\r\n      this.containsCord(area.x1, area.y2) ||\r\n      this.containsCord(area.x2, area.y1) ||\r\n      this.containsCord(area.x2, area.y2)\r\n    );\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./app/src/js/paddle.js\n\r\nclass Paddle extends Area{\r\n  constructor(width, height, x1, y1, screenTop, screenBottom) {\r\n    super(width, height, x1, y1);\r\n    this.speed = 10;\r\n    this.direction = 0;\r\n    this.enabled = false;\r\n    this.screenTop = screenTop;\r\n    this.screenBottom = screenBottom;\r\n  }\r\n\r\n  moveUp() {\r\n    this.direction = -this.speed;\r\n  }\r\n\r\n  moveDown() {\r\n    this.direction = this.speed;\r\n  }\r\n\r\n  move() {\r\n    if (this.enabled) {\r\n      this.y1 += this.direction;\r\n      if (this.y1 < this.screenTop) {\r\n        this.y1 = this.screenTop;\r\n      }\r\n      if (this.y2 > this.screenBottom) {\r\n        this.y1 = this.screenBottom - this.height;\r\n      }\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    this.direction = 0;\r\n  }\r\n\r\n  animate(ctx) {\r\n    this.move();\r\n    ctx.fillStyle = "#fff";\r\n    ctx.fillRect(this.x1, this.y1, this.width, this.height);\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./app/src/js/ball.js\n\r\nclass Ball extends Area {\r\n  constructor(width, height, x1, y1, screenTop, screenRight, screenBottom, screenLeft) {\r\n    super(width, height, x1, y1);\r\n    this.screenTop = screenTop;\r\n    this.screenRight = screenRight;\r\n    this.screenBottom = screenBottom;\r\n    this.screenLeft = screenLeft;\r\n\r\n    this.speedX = Math.floor(Math.random() * 6) + 4;\r\n    this.speedY = Math.floor(Math.random() * 6) + 4;\r\n    this.directionX = Math.random() < 0.5 ? -1 : 1;\r\n    this.directionY = Math.random() < 0.5 ? -1 : 1;\r\n    this.hitSound = new Audio("./asset/audio/hit.mp3");\r\n  }\r\n\r\n  move() {\r\n    //move\r\n    this.x1 += this.speedX * this.directionX;\r\n    this.y1 += this.speedY * this.directionY;\r\n  }\r\n\r\n  animate(ctx) {\r\n    this.move();\r\n    ctx.fillStyle = "#f00";\r\n    ctx.fillRect(this.x1, this.y1, this.width, this.height);\r\n  }\r\n\r\n  setSpeedY() {\r\n    this.speedY += 0.5;\r\n  }\r\n\r\n  setSpeedX() {\r\n    this.speedX += 0.5;\r\n  }\r\n\r\n  hitPaddle() {\r\n    this.hitSound.play();\r\n    this.setSpeedX();\r\n    this.directionX = -this.directionX;\r\n  }\r\n\r\n  hitBorder() {\r\n    this.hitSound.play();\r\n    this.setSpeedY();\r\n    this.directionY = -this.directionY;\r\n  }\r\n\r\n  //check screen top border collision\r\n  checkHitTop() {\r\n    if (this.directionY < 0 && this.y1 < 0) {\r\n      this.hitBorder();\r\n    }\r\n  }\r\n\r\n  //check collision on Righ Wall\r\n  checkHitRight() {\r\n    return this.directionX > 0 && this.x1 >= this.screenRight;\r\n  }\r\n\r\n  // check screen bottom border collision\r\n  checkHitBottom() {\r\n    if (this.directionY > 0 && this.y2 > this.screenBottom) {\r\n      this.hitBorder();\r\n    }\r\n  }\r\n\r\n  //check collision on Left Wall\r\n  checkHitLeft() {\r\n    return this.directionX < 0 && this.x2 <= 0;\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./app/src/js/input.handler.js\nclass InputHandler {\r\n  constructor(game) {\r\n    document.addEventListener("keydown", (event) => {\r\n      switch (event.keyCode) {\r\n        case 38: {\r\n          event.preventDefault();\r\n          game.paddleL.moveUp();\r\n          game.paddleR.moveUp();\r\n          break;\r\n        }\r\n\r\n        case 40: {\r\n          event.preventDefault();\r\n          game.paddleL.moveDown();\r\n          game.paddleR.moveDown();\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    document.addEventListener("keyup", (event) => {\r\n      switch (event.keyCode) {\r\n        case 38: {\r\n          event.preventDefault();\r\n          if (game.paddleL.direction < 0) game.paddleL.stop();\r\n          if (game.paddleR.direction < 0) game.paddleR.stop();\r\n          break;\r\n        }\r\n\r\n        case 40: {\r\n          event.preventDefault();\r\n          if (game.paddleL.direction > 0) game.paddleL.stop();\r\n          if (game.paddleR.direction > 0) game.paddleR.stop();\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    game.canvas.addEventListener("click", (event) => {\r\n      if (!game.isPlay) game.play();\r\n    });\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./app/src/js/game.js\n\r\n\r\n\r\n\r\n\r\nclass Game {\r\n  constructor() {\r\n    let size = Math.floor(window.visualViewport.height * 0.7);\r\n\r\n    this.canvas = document.getElementById("game_screen");\r\n    this.ctx = this.canvas.getContext("2d");\r\n    this.rank = [];\r\n    this.speedX = 0;\r\n    this.speedY = 0;\r\n    this.directionX = 0;\r\n    this.directionY = 0;\r\n    this.isPlay = false;\r\n    this.canvas.height = size;\r\n    this.canvas.width =\r\n      Math.floor(size * 2.5) < window.visualViewport.width\r\n        ? Math.floor(size * 2.5)\r\n        : Math.floor(window.visualViewport.width * 0.8);\r\n    this.gameScreen = new Area(Math.floor(this.canvas.width * 0.8), this.canvas.height, 0, 0);\r\n    this.rankScreen = new Area(Math.floor(this.canvas.width * 0.2), this.canvas.height, this.gameScreen.x2, 0);\r\n  }\r\n\r\n  init() {\r\n    let unit = Math.floor(this.gameScreen.height * 0.03);\r\n    let pad = Math.floor(unit / 3);\r\n    let ballX = Math.floor(this.gameScreen.width / 2);\r\n    let ballY = Math.floor(this.gameScreen.height / 2);\r\n    let paddleHeight = unit * 5;\r\n    let screenTop = pad;\r\n    let screenBottom = this.gameScreen.height - pad;\r\n    let screenLeft = pad;\r\n    let screenRight = this.gameScreen.width - unit - pad;\r\n\r\n    this.startTime = new Date();\r\n\r\n    this.ball = new Ball(\r\n      unit,\r\n      unit,\r\n      ballX,\r\n      ballY,\r\n      this.gameScreen.y1,\r\n      this.gameScreen.x2,\r\n      this.gameScreen.y2,\r\n      this.gameScreen.x1\r\n    );\r\n    this.paddleL = new Paddle(unit, paddleHeight, screenLeft, screenTop, screenTop, screenBottom);\r\n    this.paddleR = new Paddle(unit, paddleHeight, screenRight, screenTop, screenTop, screenBottom);\r\n    this.gameObjects = [this.ball, this.paddleL, this.paddleR];\r\n\r\n    //this.inputHandler = new InputHandler(this.paddleL, this.paddleR, this);\r\n  }\r\n\r\n  reset() {\r\n    this.rank.push(this.currentTimer);\r\n    this.rank.sort();\r\n    this.rank.reverse();\r\n    if (this.rank.length > 5) {\r\n      this.rank.pop();\r\n    }\r\n    localStorage.setItem("rank", this.rank.join(","));\r\n    this.init();\r\n  }\r\n\r\n  animate() {\r\n    this.animateGameScreen();\r\n    this.animateRankScreen();\r\n  }\r\n\r\n  animateGameScreen() {\r\n    //game screen\r\n    this.ctx.fillStyle = "#000";\r\n    this.ctx.fillRect(this.gameScreen.x1, this.gameScreen.y1, this.gameScreen.width, this.gameScreen.height);\r\n\r\n    if (this.ball.directionX > 0) {\r\n      this.paddleL.enabled = false;\r\n      this.paddleR.enabled = true;\r\n    } else {\r\n      this.paddleL.enabled = true;\r\n      this.paddleR.enabled = false;\r\n    }\r\n\r\n    this.ball.checkHitTop();\r\n    this.ball.checkHitBottom();\r\n    this.checkHitPaddle(this.paddleL,this.ball);\r\n    this.checkHitPaddle(this.paddleR,this.ball);\r\n\r\n    if (this.ball.checkHitRight() || this.ball.checkHitLeft()) {\r\n      this.reset();\r\n    }\r\n\r\n    this.gameObjects.forEach((object) => object.animate(this.ctx));\r\n  }\r\n\r\n  animateRankScreen() {\r\n    let line = Math.floor(this.rankScreen.height * 0.06);\r\n    let pad = Math.floor(line * 0.8);\r\n\r\n    this.currentTimer = new Date(new Date() - this.startTime.getTime());\r\n\r\n    //rank screen\r\n    this.ctx.fillStyle = "#333";\r\n    this.ctx.fillRect(this.rankScreen.x1, this.rankScreen.y1, this.rankScreen.width, this.rankScreen.height);\r\n\r\n    this.ctx.fillStyle = "#fff";\r\n    this.ctx.textBaseline = "middle";\r\n    this.ctx.textAlign = "center";\r\n    this.ctx.font = `${line}px sans-serif`;\r\n\r\n    this.ctx.fillText("TIMER", this.rankScreen.x1 + this.rankScreen.width / 2, pad);\r\n    this.ctx.fillText(this.formatTimer(this.currentTimer), this.rankScreen.x1 + this.rankScreen.width / 2, pad + line);\r\n    this.ctx.fillText("RANK", this.rankScreen.x1 + this.rankScreen.width / 2, Math.floor(pad * 2 + line * 2));\r\n\r\n    this.rank.forEach((rank, index) => {\r\n      this.ctx.fillText(\r\n        this.formatTimer(rank),\r\n        this.rankScreen.x1 + this.rankScreen.width / 2,\r\n        Math.floor(pad * 2 + line * 3) + line * index\r\n      );\r\n    });\r\n\r\n    this.ctx.fillText("Use", this.rankScreen.x1 + this.rankScreen.width / 2, Math.floor(pad * 2 + line * 9));\r\n    this.ctx.fillText("↑ and ↓ keys", this.rankScreen.x1 + this.rankScreen.width / 2, Math.floor(pad * 3 + line * 10));\r\n    this.ctx.fillText("To play", this.rankScreen.x1 + this.rankScreen.width / 2, Math.floor(pad * 4 + line * 11));\r\n  }\r\n\r\n  checkHitPaddle(paddle,ball) {\r\n    if (paddle.enabled) {\r\n      if (paddle.containsArea(ball)) {\r\n        paddle.enabled = false;\r\n        ball.hitPaddle();\r\n      }\r\n    }\r\n  }\r\n\r\n  formatTimer(timer) {\r\n    console.log(typeof timer);\r\n    let hour = timer.getUTCHours();\r\n    let minute = timer.getUTCMinutes();\r\n    let second = timer.getUTCSeconds();\r\n    let fHour = hour < 10 ? "0" + hour : hour; //hour < 0 ? \'00\' :\r\n    let fMinute = minute < 10 ? "0" + minute : minute;\r\n    let fSecond = second < 10 ? "0" + second : second;\r\n    return fHour + ":" + fMinute + ":" + fSecond;\r\n  }\r\n\r\n  gameLoop() {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.animate();\r\n\r\n    requestAnimationFrame((timestamp) => {\r\n      this.gameLoop();\r\n    });\r\n  }\r\n\r\n  play() {\r\n    this.isPlay = true;\r\n    this.init();\r\n    this.gameLoop();\r\n  }\r\n\r\n  start() {\r\n    let storageRank = localStorage.getItem("rank");\r\n    let size = Math.floor(this.canvas.height * 0.1);\r\n    \r\n    this.rank = storageRank == null || storageRank == "" ? this.rank : storageRank.split(",").map((item) => parseInt(item));\r\n    this.inputHandler = new InputHandler(this);\r\n\r\n    console.log("game.1", this.rank);\r\n\r\n\r\n    this.ctx.fillStyle = "#000";\r\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    this.ctx.fillStyle = "#f00";\r\n    this.ctx.textBaseline = "middle";\r\n    this.ctx.textAlign = "center";\r\n    this.ctx.font = `${size}px sans-serif`;\r\n\r\n    this.ctx.fillText("CLICK ANYWHERE TO START", Math.floor(this.canvas.width / 2), Math.floor(this.canvas.height / 2));\r\n  }\r\n}\r\n\n;// CONCATENATED MODULE: ./app/src/js/index.js\n\r\n\r\nlet game = new Game();\r\ngame.start();\n\n//# sourceURL=webpack:///./app/src/js/index.js_+_5_modules?')}},__webpack_require__={r:n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})}},__webpack_exports__={};__webpack_modules__["./app/src/js/index.js"](0,__webpack_exports__,__webpack_require__)})();